/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package licorice.gui;

import licorice.analysis.OutputFormat;
import utils.FilesSource;
import utils.VCFUtils;
import licorice.analysis.Analysis;
import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.ZipUtil;
import utils.reference.GenomeRef;
import utils.reference.SimpleGenomeRef;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static utils.ZipUtil.directoryfy;

/**
 * @author varuzza
 */
public class MainPanel extends javax.swing.JPanel {

    private static Logger log = LoggerFactory.getLogger(MainPanel.class);
    private Analysis analysis;
    private Properties prop = new Properties();
    private StyledDocument doc;
    private final JFileChooser fc = new JFileChooser();

    private Integer minQual = 15;
    private Double maxNC = 0.95;
    private File[] inputFiles = new File[] {};


    private GenomeManager genomeManager;

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        try {
            String jarPath = MainPanel.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            String genomesDir="./genome";

            System.out.println(String.format("JAR Path '%s'", jarPath));
            File propFile = new File("licorice.properties");
            if (propFile.exists()) {
                prop.load(new FileInputStream("licorice.properties"));
                minQual = Integer.parseInt(prop.getProperty("minimum.quality"));
                maxNC = Double.parseDouble(prop.getProperty("maximum.nocall.rate"));
                String gd = prop.getProperty("genomes.dir");
                if (gd != null)
                    genomesDir = gd;
                else
                    prop.setProperty("genome.dir",genomesDir);
            } else {
                prop = new Properties();
                prop.setProperty("genome.path","./genome/GCF_000004515.4_Glycine_max_v2.0_genomic.fna");
                prop.setProperty("input.default_dir",".");
                prop.setProperty("genome.dir",genomesDir);
            }

            log.info(String.format("Genomes directory: '%s'",genomesDir));

            genomeManager = new GenomeManager(genomesDir);

            initComponents();
            doc = logPane.getStyledDocument();

            fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            fc.setMultiSelectionEnabled(true);
            File defaultDir = new File(prop.getProperty("input.default_dir"));
            if (!defaultDir.exists()) {
                defaultDir = new File(".");
            }

            fc.setCurrentDirectory(defaultDir);
        } catch (Exception ex) {
            ex.printStackTrace();
            log.error(ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        fileNameField = new javax.swing.JTextField();
        fileDialogBtn = new javax.swing.JButton();
        processBtn = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        logPane = new javax.swing.JTextPane();
        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        minQualField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        maxNCField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        outputFormat = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        transpose = new javax.swing.JCheckBox();
        refGenome = new javax.swing.JComboBox();

        inputLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        inputLabel.setLabelFor(inputLabel);
        inputLabel.setText("Input");

        fileNameField.setName("fileName"); // NOI18N

        fileDialogBtn.setText("...");
        fileDialogBtn.setName("fileDialogButton"); // NOI18N
        fileDialogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileDialogBtnActionPerformed(evt);
            }
        });

        processBtn.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        processBtn.setText("Process");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        logPane.setEditable(false);
        logPane.setText("Select the ZIP file with the VCF's and then click in Process \nto create the matrix.\n");
        jScrollPane1.setViewportView(logPane);

        titleLabel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        titleLabel.setText("Licorice 2");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Min. Quality");

        minQualField.setText("30");
        minQualField.setToolTipText("Minimum Variant Quality");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Maximum Nocall Rate");

        maxNCField.setText("0.95");
        maxNCField.setToolTipText("Minimum Variant Quality");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Output Format");

        outputFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "One Column", "Two Columns", "Without Bar", "Simple", "Extended" }));

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Transpose");

        transpose.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N

        refGenome.setModel(new javax.swing.DefaultComboBoxModel(genomeManager.listGenomes()));
        refGenome.setSelectedIndex(genomeManager.getIndex(prop.getProperty("genome.path")));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1143, Short.MAX_VALUE)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel)
                                .addGap(0, 1041, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(79, 79, 79)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(minQualField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(maxNCField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(transpose)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 611, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(outputFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(refGenome, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(inputLabel)
                                        .addGap(57, 57, 57)
                                        .addComponent(fileNameField)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileDialogBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(466, 466, 466)
                        .addComponent(processBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(titleLabel)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileDialogBtn)
                    .addComponent(inputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(minQualField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(outputFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refGenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(maxNCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(transpose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(processBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void appendLog(String message) {
        SwingUtilities.invokeLater(() -> {
            try {
                doc.insertString(doc.getLength(), message, null);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            logPane.setCaretPosition(doc.getLength());
        });
    }

    private void enableProcessButton() {
        processBtn.setText("Process");
        processBtn.setEnabled(true);
        processBtn.repaint();
    }

    private void disableProcessButton() {
        processBtn.setText("Processing...");
        processBtn.setEnabled(false);
    }

    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed

        appendLog("Analysis Started...\n");
        disableProcessButton();

        SwingUtilities.invokeLater(() -> {
            try {
                minQual = Integer.parseInt(minQualField.getText());

                //progressBar = new JProgressBar();
                progressBar.setMinimum(0);
                progressBar.setMaximum(100);

                String genomeFilename = genomeManager.getFilename(refGenome.getSelectedIndex());
                prop.setProperty("genome.path",genomeFilename);

                Path genomePath = Paths.get(genomeFilename);


                prop.setProperty("input.default_dir", fc.getCurrentDirectory().getAbsolutePath());
                prop.setProperty("minimum.quality", minQual.toString());
                prop.setProperty("maximum.nocall.rate", maxNC.toString());
                prop.store(new FileOutputStream("licorice.properties"), null);


                Path inputPath = Paths.get(inputFiles[0].getAbsolutePath());

                final Path outputPath = inputPath.resolveSibling(
                        FilenameUtils.getBaseName(inputPath.getFileName().toString()) + ".txt");
                appendLog("Output in: '" + outputPath.getParent() + "'\n");

                for(File file:inputFiles) {
                    if (!inputPath.toFile().exists()) {
                        JOptionPane.showMessageDialog(null, "Input file does not exist");
                        appendLog("Input file '" + inputPath + "' does not exist");
                        enableProcessButton();
                        return;
                    }

                    Path effectivePath = ZipUtil.directoryfy(inputPath);

                    Map<String, String> samples = VCFUtils.makeSamplesDictionary(VCFUtils.listVCFFiles(effectivePath));

                    appendLog("==================================\n");
                    appendLog("Samples List\n");
                    appendLog("==================================\n");
                    appendLog("Sample\tFile");

                    samples.forEach((k, v) -> appendLog(String.format("%s\t%s\n", k, v)));

                    appendLog("==================================\n");

                    Path samplesPath = inputPath.resolveSibling(
                            FilenameUtils.getBaseName(inputPath.getFileName().toString()) + ".samples.txt");
                    appendLog("Samples List in: '" + samplesPath.getParent() + "'\n");

                    try (PrintStream out = new PrintStream(new FileOutputStream(samplesPath.toFile()))) {
                        out.println("Sample\tFile");
                        samples.forEach((k, v) -> out.println(String.format("%s\t%s", k, v)));
                    }

                }

                SimpleGenomeRef genome = new SimpleGenomeRef(genomePath);

                GenomeRef.ValidationResult validation = genome.validate();

                if (!validation.isValid()) {
                    appendLog("Reference Error: '" + validation.getErrors() + "'\n");
                    enableProcessButton();
                    return;
                }


                Stream<Path> source = new FilesSource(Arrays.stream(inputFiles).map( f -> f.getAbsolutePath()).collect(Collectors.toList())).stream();

                analysis = new Analysis(OutputFormat.getFormat(outputFormat.getSelectedIndex(),transpose.isSelected()),genome, minQual, maxNC,outputPath, source);

                analysis.progressListener(progress -> progressBar.setValue(progress));

                analysis.onFinish(() -> {
                    fileNameField.setText("");
                    enableProcessButton();
                    appendLog(String.format("Output File '%s'\n",outputPath));
                    appendLog("Analysis Finished.\n");
                    this.repaint();
                    return null;
                });
                analysis.onException((Thread t, Throwable ex) -> {
                    appendLog(ex.getMessage());
                    appendLog("Analysis Failed!!!");
                    JOptionPane.showMessageDialog(null, "Analysis Failed!!!");
                    enableProcessButton();
                });
            } catch (IOException ex) {
                appendLog(ex.getMessage() + "\n");
                log.error(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Analysis Failed!!!");
                ex.printStackTrace();
                enableProcessButton();
            }
            analysis.start();
            //progressBar.

        });
    }//GEN-LAST:event_processBtnActionPerformed

    private void fileDialogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDialogBtnActionPerformed
        int ret = fc.showOpenDialog(this);

        if (ret == JFileChooser.APPROVE_OPTION) {
            prop.setProperty("input.default_dir", fc.getCurrentDirectory().getAbsolutePath());
            try {
                prop.store(new FileOutputStream("licorice.properties"), null);
            } catch (IOException e) {
                log.error(e.getMessage());
            }

            inputFiles = fc.getSelectedFiles();
            StringBuilder fileNames = new StringBuilder();
            if (inputFiles.length==1) {
                log.info("Opening: " + inputFiles[0].getName() + ".");
                try {
                    fileNameField.setText(inputFiles[0].getCanonicalPath());
                } catch (IOException e) {
                    log.error(e.getMessage());
                }
            } else if (inputFiles.length > 1) {
                for (File file : inputFiles) {
                    log.info("Opening: " + file.getName() + ".");
                    fileNames.append(file.getName());
                }
                fileNameField.setText(fileNames.toString());
            }
        }
    }//GEN-LAST:event_fileDialogBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fileDialogBtn;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane logPane;
    private javax.swing.JTextField maxNCField;
    private javax.swing.JTextField minQualField;
    private javax.swing.JComboBox outputFormat;
    private javax.swing.JButton processBtn;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox refGenome;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JCheckBox transpose;
    // End of variables declaration//GEN-END:variables
}
